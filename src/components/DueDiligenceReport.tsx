import React, { useState } from 'react';
import { jsPDF } from 'jspdf';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Loader2, FileText, Lock } from "lucide-react";
import { useAuth } from '@/components/auth/authContext';
import { useNavigate } from 'react-router-dom';

interface DueDiligenceReportProps {
  className?: string;
}

export function DueDiligenceReport({ className }: DueDiligenceReportProps) {
  const [company, setCompany] = useState("");
  const [report, setReport] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [usageCount, setUsageCount] = useState(0);
  const { user, trialStatus } = useAuth();
  const navigate = useNavigate();

  const generateReport = async () => {
    if (!user) {
      navigate('/login');
      return;
    }

    if (!trialStatus.isActive) {
      navigate('/pricing');
      return;
    }

    if (!company.trim()) {
      setError("Please enter a company name");
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const response = await fetch("https://generateduediligence-toafsgw4rq-uc.a.run.app", {
        method: "POST",
        headers: { 
          "Content-Type": "application/json",
          "Authorization": `Bearer ${await user.getIdToken()}`
        },
        body: JSON.stringify({ company }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Failed to generate report');
      }

      setReport(data.data);
      setUsageCount(prev => prev + 1);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setLoading(false);
    }
  };

  const downloadPDF = () => {
    const doc = new jsPDF();
    
    // Add header
    doc.setFontSize(20);
    doc.text("Aidiligence Pro Report", 20, 20);
    
    // Add company name
    doc.setFontSize(16);
    doc.text(`Due Diligence Report: ${company}`, 20, 35);
    
    // Add date
    doc.setFontSize(12);
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 45);
    
    // Add report content
    doc.setFontSize(12);
    const splitText = doc.splitTextToSize(report, 170);
    doc.text(splitText, 20, 60);
    
    // Add footer
    doc.setFontSize(10);
    doc.text("Generated by Aidiligence Pro - https://aidiligence.pro", 20, doc.internal.pageSize.height - 20);
    
    doc.save(`${company.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_due_diligence.pdf`);
  };

  if (!user) {
    return (
      <Card className={className}>
        <CardContent className="py-12 text-center">
          <Lock className="w-12 h-12 mx-auto mb-4 text-muted-foreground" />
          <h3 className="text-xl font-semibold mb-2">Login Required</h3>
          <p className="text-muted-foreground mb-6">Please login to access the due diligence report generator.</p>
          <Button onClick={() => navigate('/login')}>Login</Button>
        </CardContent>
      </Card>
    );
  }

  if (!trialStatus.isActive) {
    return (
      <Card className={className}>
        <CardContent className="py-12 text-center">
          <Lock className="w-12 h-12 mx-auto mb-4 text-muted-foreground" />
          <h3 className="text-xl font-semibold mb-2">Trial Expired</h3>
          <p className="text-muted-foreground mb-6">Your trial has expired. Please upgrade to continue using the platform.</p>
          <Button onClick={() => navigate('/pricing')}>View Pricing</Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className={className}>
      <CardHeader>
        <CardTitle>Due Diligence Report Generator</CardTitle>
        <CardDescription>
          Generate comprehensive due diligence reports powered by AI
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="flex gap-4">
            <Input
              type="text"
              value={company}
              onChange={(e) => setCompany(e.target.value)}
              placeholder="Enter company name (e.g., Apple Inc)"
              disabled={loading}
            />
            <Button 
              onClick={generateReport}
              disabled={loading || !company.trim()}
            >
              {loading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Generating...
                </>
              ) : (
                'Generate Report'
              )}
            </Button>
          </div>

          {error && (
            <Alert variant="destructive">
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          {usageCount >= 5 && (
            <Alert>
              <AlertTitle>Usage Limit</AlertTitle>
              <AlertDescription>
                You've reached 5 reports. Consider upgrading to our premium plan for unlimited reports.
              </AlertDescription>
            </Alert>
          )}

          {report && (
            <div className="space-y-4">
              <Card>
                <CardContent className="pt-6">
                  <div className="prose prose-sm max-w-none dark:prose-invert">
                    {report.split('\n').map((line, index) => (
                      <p key={index} className="my-2 font-normal text-base leading-relaxed">
                        {line}
                      </p>
                    ))}
                  </div>
                </CardContent>
              </Card>
              <Button onClick={downloadPDF} variant="outline" className="w-full sm:w-auto">
                <FileText className="w-4 h-4 mr-2" />
                Download PDF Report
              </Button>
            </div>
          )}
        </div>
      </CardContent>
      <CardFooter className="text-sm text-muted-foreground">
        {usageCount > 0 && `Reports generated this session: ${usageCount}`}
      </CardFooter>
    </Card>
  );
} 