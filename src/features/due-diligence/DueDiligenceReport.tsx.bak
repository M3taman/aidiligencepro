import React, { useState, useRef } from 'react';
import { jsPDF } from 'jspdf';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Loader2, FileText, Lock, Search, Download, Settings2, ChevronDown, ChevronUp, RefreshCcw, AlertCircle } from "lucide-react";
import { useAuth } from '@/components/auth/authContext';
import { useNavigate } from 'react-router-dom';
import { useUserSettings } from '@/hooks/useUserSettings';
import Logo from '@/components/ui/Logo';
import { 
  DueDiligenceReport as DueDiligenceReportType,
  ReportGenerationOptions,
  ReportFormat
} from './types';
import { toast } from 'sonner';
import { generateMockDueDiligenceReport } from "./mockApi";

interface DueDiligenceReportProps {
  className?: string;
}

export function DueDiligenceReport({ className }: DueDiligenceReportProps) {
  const { user } = useAuth();
  const { settings } = useUserSettings();
  const [company, setCompany] = useState("");
  const [loading, setLoading] = useState(false);
  const [report, setReport] = useState<DueDiligenceReportType | null>(null);
  const [showOptions, setShowOptions] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [options, setOptions] = useState<ReportGenerationOptions>({
    format: {
      type: settings?.reportFormat || 'detailed',
      includeCharts: true,
      includeTables: true
    },
    sections: [
      'executiveSummary',
      'financialAnalysis',
      'marketAnalysis',
      'riskAssessment',
      'recentDevelopments'
    ]
  });
  const logoRef = useRef<HTMLDivElement>(null);
  const navigate = useNavigate();

  const generateReport = async () => {
    if (!user) {
      navigate('/login');
      return;
    }

    if (!company.trim()) {
      toast.error('Please enter a company name');
      return;
    }

    setLoading(true);
    setError(null);
    
    try {
      // Check if we're in development mode
      const isDev = import.meta.env.MODE === 'development';
      
      if (isDev) {
        // Use mock API in development
        console.log("Using mock API for development");
        setLoading(true);
        setError(null);
        const mockReport = await generateMockDueDiligenceReport(company);
        setReport(mockReport);
        console.log("Mock report data:", mockReport);
        setLoading(false);
      } else {
        // Use real API in production
        setLoading(true);
        setError(null);
        const response = await fetch('https://generateduediligence-toafsgw4rq-uc.a.run.app/generateDueDiligence', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${await user?.getIdToken()}`
          },
          body: JSON.stringify({ 
            companyName: company,
            options
          }),
        });

        if (!response.ok) {
      const response = await fetch('https://generateduediligence-toafsgw4rq-uc.a.run.app/generateDueDiligence', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${await user?.getIdToken()}`
        },
        body: JSON.stringify({ 
          companyName: company,
          options
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.error || 'Failed to generate report');
      }

      const data = await response.json();
      
      // Handle the structured data response - the cloud function now returns 
      // a pre-structured report in data.data instead of raw text
      setReport(data.data);
      
      // Log report structure for debugging (remove in production)
      console.log('Report data structure:', data.data);
      
      toast.success('Report generated successfully');
    } catch (error) {
      console.error('Report generation error:', error);
      setError(error instanceof Error ? error.message : 'Failed to generate report. Please try again.');
      toast.error('Failed to generate report. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const addAiDiligenceLogoToPDF = (doc: jsPDF, x: number, y: number, width: number = 50) => {
    // Draw the logo manually in the PDF
    const primaryColor = '#1E40AF'; // Blue color for logo
    const accentColor = '#F59E0B';  // Amber color for dot
    
    // Calculate height based on width (to maintain aspect ratio)
    const height = width * (48/48); // Aspect ratio from SVG viewBox
    
    // Calculate all positions relative to specified x,y and width
    const radius = width * (22/48);
    const centerX = x + width/2;
    const centerY = y + height/2;
    
    // Main circle
    doc.setDrawColor(primaryColor);
    doc.setLineWidth(width * (2/48));
    doc.circle(centerX, centerY, radius, 'S');
    
    // AI letters - simplified to match logo
    doc.setDrawColor(primaryColor);
    doc.setLineWidth(width * (3/48));
    
    // A
    const scale = width/48;
    doc.line(x + 14*scale, y + 16*scale, x + 18*scale, y + 32*scale);
    doc.line(x + 10*scale, y + 32*scale, x + 26*scale, y + 32*scale);
    
    // I
    doc.line(x + 32*scale, y + 16*scale, x + 32*scale, y + 32*scale);
    doc.line(x + 28*scale, y + 16*scale, x + 36*scale, y + 16*scale);
    
    // Accent dot
    doc.setFillColor(accentColor);
    doc.circle(centerX, centerY, width * (4/48), 'F');
    
    // Add text
    doc.setTextColor(primaryColor);
    doc.setFontSize(width * (0.4));
    doc.setFont('helvetica', 'bold');
    doc.text('aidiligence.pro', x, y + height + 10);
    
    // Add website URL with hyperlink
    doc.link(x, y + height + 2, width * 2, 10, { url: 'https://aidiligence.pro' });
  };

  const downloadReport = () => {
    if (!report) return;

    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.width;
    const pageHeight = doc.internal.pageSize.height;
    const margin = 20;
    
    // Add Logo in the top left
    addAiDiligenceLogoToPDF(doc, margin, margin);
    
    // Add report title and company name
    doc.setFontSize(22);
    doc.setFont('helvetica', 'bold');
    doc.text('Due Diligence Report', pageWidth/2, margin + 30, { align: 'center' });
    
    doc.setFontSize(18);
    doc.text(company, pageWidth/2, margin + 40, { align: 'center' });
    
    // Add report metadata
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    const reportDate = new Date(report.timestamp || new Date().toISOString()).toLocaleString();
    doc.text(`Generated on: ${reportDate}`, pageWidth/2, margin + 50, { align: 'center' });
    
    // Add report ID and other metadata
    doc.setFontSize(8);
    const reportId = `ADR-${Date.now().toString(36).toUpperCase()}`;
    doc.text(`Report ID: ${reportId}`, margin, margin + 60);
    doc.text(`Client: ${user?.email}`, margin, margin + 65);
    
    // Add disclaimer
    const disclaimerText = "DISCLAIMER: This report is generated using AI and should be used for informational purposes only. " +
      "It does not constitute investment advice. Always perform your own due diligence before making investment decisions. " +
      "Visit https://aidiligence.pro for more information.";
    doc.setFontSize(8);
    doc.setTextColor(100, 100, 100);
    const disclaimerLines = doc.splitTextToSize(disclaimerText, pageWidth - 2*margin);
    doc.text(disclaimerLines, pageWidth/2, margin + 75, { align: 'center' });
    
    // Add horizontal line
    doc.setDrawColor(200, 200, 200);
    doc.setLineWidth(0.5);
    doc.line(margin, margin + 85, pageWidth - margin, margin + 85);
    
    // Reset text color for main content
    doc.setTextColor(0, 0, 0);
    
    // Start content position
    let y = margin + 95;
    
    // Function to add sections with proper formatting
    const addSection = (title: string, content: string | string[], level: 1 | 2 = 1) => {
      // Check if we need a new page
      if (y > pageHeight - 40) {
        doc.addPage();
        y = margin;
        
        // Add small logo at the top of the new page
        addAiDiligenceLogoToPDF(doc, pageWidth - 50, 10, 20);
      }
      
      if (level === 1) {
        doc.setFontSize(16);
        doc.setFont('helvetica', 'bold');
        doc.setTextColor(41, 98, 255); // Blue color for main headings
      } else {
        doc.setFontSize(14);
        doc.setFont('helvetica', 'bold');
        doc.setTextColor(80, 80, 80); // Gray for subheadings
      }
      
      doc.text(title, margin, y);
      y += 10;
      
      // Reset text formatting for content
      doc.setFontSize(11);
      doc.setFont('helvetica', 'normal');
      doc.setTextColor(0, 0, 0);
      
      if (Array.isArray(content)) {
        // For lists
        content.forEach((item, index) => {
          const bullet = "â€¢ ";
          const itemText = doc.splitTextToSize(item, pageWidth - 2*margin - 10);
          
          // Check if we need a new page
          if (y + (itemText.length * 7) > pageHeight - 20) {
            doc.addPage();
            y = margin;
            
            // Add small logo at the top of the new page
            addAiDiligenceLogoToPDF(doc, pageWidth - 50, 10, 20);
          }
          
          doc.text(bullet, margin, y);
          doc.text(itemText, margin + 5, y);
          y += itemText.length * 7 + 3;
        });
      } else {
        // For paragraphs
        const lines = doc.splitTextToSize(content, pageWidth - 2*margin);
        
        lines.forEach(line => {
          // Check if we need a new page
          if (y > pageHeight - 20) {
            doc.addPage();
            y = margin;
            
            // Add small logo at the top of the new page
            addAiDiligenceLogoToPDF(doc, pageWidth - 50, 10, 20);
          }
          
          doc.text(line, margin, y);
          y += 7;
        });
      }
      
      y += 10; // Add space after section
    };

    // Add sections based on report data
    if (report.executiveSummary) {
      addSection('Executive Summary', report.executiveSummary.overview);
      
      // Add risk rating with color coding
      const riskRating = report.executiveSummary.riskRating;
      doc.setFontSize(12);
      doc.setFont('helvetica', 'bold');
      doc.text('Risk Rating:', margin, y);
      
      // Set color based on risk level
      if (riskRating === 'Low') {
        doc.setTextColor(46, 204, 113); // Green
      } else if (riskRating === 'Medium') {
        doc.setTextColor(243, 156, 18); // Orange
      } else {
        doc.setTextColor(231, 76, 60); // Red
      }
      
      doc.text(riskRating, margin + 30, y);
      y += 10;
      
      // Reset text color
      doc.setTextColor(0, 0, 0);
      
      addSection('Key Findings', report.executiveSummary.keyFindings, 2);
      
      // Add recommendation
      doc.setFontSize(12);
      doc.setFont('helvetica', 'bold');
      doc.text('Recommendation:', margin, y);
      y += 7;
      
      doc.setFont('helvetica', 'normal');
      const recommendationLines = doc.splitTextToSize(
        report.executiveSummary.recommendation, 
        pageWidth - 2*margin
      );
      doc.text(recommendationLines, margin, y);
      y += recommendationLines.length * 7 + 10;
    }

    if (report.financialAnalysis) {
      addSection('Financial Analysis', report.financialAnalysis.trends);
      
      // Add financial metrics if available
      if (Object.keys(report.financialAnalysis.metrics).length > 0) {
        y += 5;
        doc.setFontSize(14);
        doc.setFont('helvetica', 'bold');
        doc.text('Key Financial Metrics', margin, y);
        y += 10;
        
        // Create a table for key metrics
        doc.setFontSize(10);
        doc.setDrawColor(220, 220, 220);
        doc.setLineWidth(0.1);
        
        const metricKeys = Object.keys(report.financialAnalysis.metrics);
        const metrics = report.financialAnalysis.metrics;
        
        // Determine number of columns and calculate width
        const numColumns = 2;
        const columnWidth = (pageWidth - 2*margin) / numColumns;
        
        for (let i = 0; i < metricKeys.length; i += numColumns) {
          // Check if we need a new page
          if (y > pageHeight - 30) {
            doc.addPage();
            y = margin;
            
            // Add small logo at the top of the new page
            addAiDiligenceLogoToPDF(doc, pageWidth - 50, 10, 20);
          }
          
          // Draw row
          const rowKeys = metricKeys.slice(i, i + numColumns);
          
          rowKeys.forEach((key, index) => {
            const x = margin + (index * columnWidth);
            
            // Draw cell
            doc.rect(x, y, columnWidth, 20);
            
            // Add key
            doc.setFont('helvetica', 'bold');
            doc.text(key, x + 5, y + 7);
            
            // Add value
            doc.setFont('helvetica', 'normal');
            doc.text(String(metrics[key]), x + 5, y + 15);
          });
          
          y += 20;
        }
        
        y += 10;
      }
      
      addSection('Financial Strengths', report.financialAnalysis.strengths, 2);
      addSection('Financial Weaknesses', report.financialAnalysis.weaknesses, 2);
    }

    if (report.marketAnalysis) {
      addSection('Market Position & Competitive Analysis', report.marketAnalysis.position);
      
      // Add SWOT analysis
      if (report.marketAnalysis.swot) {
        y += 5;
        doc.setFontSize(14);
        doc.setFont('helvetica', 'bold');
        doc.text('SWOT Analysis', margin, y);
        y += 10;
        
        const halfWidth = (pageWidth - 2*margin - 10) / 2;
        const initialY = y;
        let leftColumnY = y;
        let rightColumnY = y;
        
        // Strengths (top left)
        doc.setFontSize(12);
        doc.setTextColor(46, 204, 113); // Green for strengths
        doc.text('Strengths', margin, leftColumnY);
        leftColumnY += 7;
        
        doc.setTextColor(0, 0, 0);
        doc.setFontSize(10);
        report.marketAnalysis.swot.strengths.forEach(strength => {
          const textLines = doc.splitTextToSize(`â€¢ ${strength}`, halfWidth);
          
          // Check if we need to extend the page
          if (leftColumnY + (textLines.length * 5) > pageHeight - 20) {
            // Instead of new page, we'll overflow to the right column
            // and continue from there
            leftColumnY = rightColumnY;
          }
          
          doc.text(textLines, margin, leftColumnY);
          leftColumnY += textLines.length * 5 + 2;
        });
        
        // Weaknesses (top right)
        doc.setFontSize(12);
        doc.setTextColor(231, 76, 60); // Red for weaknesses
        doc.text('Weaknesses', margin + halfWidth + 10, rightColumnY);
        rightColumnY += 7;
        
        doc.setTextColor(0, 0, 0);
        doc.setFontSize(10);
        report.marketAnalysis.swot.weaknesses.forEach(weakness => {
          const textLines = doc.splitTextToSize(`â€¢ ${weakness}`, halfWidth);
          
          // Check if we need to extend the page
          if (rightColumnY + (textLines.length * 5) > pageHeight - 20) {
            doc.addPage();
            rightColumnY = margin;
            leftColumnY = margin; // Reset both columns
            
            // Add small logo at the top of the new page
            addAiDiligenceLogoToPDF(doc, pageWidth - 50, 10, 20);
          }
          
          doc.text(textLines, margin + halfWidth + 10, rightColumnY);
          rightColumnY += textLines.length * 5 + 2;
        });
        
        // Set y to the maximum of the two columns
        y = Math.max(leftColumnY, rightColumnY) + 10;
        
        // Check if we need a new page for opportunities and threats
        if (y > pageHeight - 50) {
          doc.addPage();
          y = margin;
            
          // Add small logo at the top of the new page
          addAiDiligenceLogoToPDF(doc, pageWidth - 50, 10, 20);
        }
        
        leftColumnY = y;
        rightColumnY = y;
        
        // Opportunities (bottom left)
        doc.setFontSize(12);
        doc.setTextColor(52, 152, 219); // Blue for opportunities
        doc.text('Opportunities', margin, leftColumnY);
        leftColumnY += 7;
        
        doc.setTextColor(0, 0, 0);
        doc.setFontSize(10);
        report.marketAnalysis.swot.opportunities.forEach(opportunity => {
          const textLines = doc.splitTextToSize(`â€¢ ${opportunity}`, halfWidth);
          
          // Check if we need to extend the page
          if (leftColumnY + (textLines.length * 5) > pageHeight - 20) {
            // Instead of new page, we'll overflow to the right column
            // and continue from there
            leftColumnY = rightColumnY;
          }
          
          doc.text(textLines, margin, leftColumnY);
          leftColumnY += textLines.length * 5 + 2;
        });
        
        // Threats (bottom right)
        doc.setFontSize(12);
        doc.setTextColor(243, 156, 18); // Orange for threats
        doc.text('Threats', margin + halfWidth + 10, rightColumnY);
        rightColumnY += 7;
        
        doc.setTextColor(0, 0, 0);
        doc.setFontSize(10);
        report.marketAnalysis.swot.threats.forEach(threat => {
          const textLines = doc.splitTextToSize(`â€¢ ${threat}`, halfWidth);
          
          // Check if we need to extend the page
          if (rightColumnY + (textLines.length * 5) > pageHeight - 20) {
            doc.addPage();
            rightColumnY = margin;
            leftColumnY = margin; // Reset both columns
            
            // Add small logo at the top of the new page
            addAiDiligenceLogoToPDF(doc, pageWidth - 50, 10, 20);
          }
          
          doc.text(textLines, margin + halfWidth + 10, rightColumnY);
          rightColumnY += textLines.length * 5 + 2;
        });
        
        // Set y to the maximum of the two columns
        y = Math.max(leftColumnY, rightColumnY) + 10;
      }
    }

    if (report.riskAssessment) {
      addSection('Risk Assessment', '');
      addSection('Financial Risks', report.riskAssessment.financial, 2);
      addSection('Operational Risks', report.riskAssessment.operational, 2);
      addSection('Market Risks', report.riskAssessment.market, 2);
      
      if (report.riskAssessment.regulatory.length > 0) {
        addSection('Regulatory Risks', report.riskAssessment.regulatory, 2);
      }
      
      if (report.riskAssessment.esg.length > 0) {
        addSection('ESG Considerations', report.riskAssessment.esg, 2);
      }
    }
    
    // Add Recent Developments section if present
    if (report.recentDevelopments && 
        (report.recentDevelopments.news?.length > 0 || 
         report.recentDevelopments.filings?.length > 0 || 
         report.recentDevelopments.strategic?.length > 0)) {
      
      addSection('Recent Developments', '');
      
      // Add news if available
      if (report.recentDevelopments.news && report.recentDevelopments.news.length > 0) {
        doc.setFontSize(14);
        doc.setFont('helvetica', 'bold');
        doc.text('Recent News', margin, y);
        y += 10;
        
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(10);
        
        report.recentDevelopments.news.slice(0, 5).forEach((news, index) => {
          // Check if we need a new page
          if (y > pageHeight - 40) {
            doc.addPage();
            y = margin;
            
            // Add small logo at the top of the new page
            addAiDiligenceLogoToPDF(doc, pageWidth - 50, 10, 20);
          }
          
          // Add news item
          doc.setFont('helvetica', 'bold');
          const titleLines = doc.splitTextToSize(news.title, pageWidth - 2*margin);
          doc.text(titleLines, margin, y);
          y += titleLines.length * 5 + 2;
          
          // Add source and date
          doc.setFont('helvetica', 'italic');
          doc.setTextColor(100, 100, 100);
          const sourceDate = `${news.source?.name || 'Unknown Source'} - ${new Date(news.date).toLocaleDateString() || 'Unknown date'}`;
          doc.text(sourceDate, margin, y);
          y += 5;
          
          // Add URL with hyperlink if available
          if (news.url) {
            doc.setTextColor(41, 98, 255); // Blue for link
            doc.text('View Article', margin, y);
            doc.link(margin, y - 4, doc.getTextWidth('View Article'), 5, { url: news.url });
            y += 7;
          }
          
          // Reset color
          doc.setTextColor(0, 0, 0);
          
          // Add separator
          if (index < report.recentDevelopments.news.length - 1) {
            doc.setDrawColor(220, 220, 220);
            doc.setLineWidth(0.1);
            doc.line(margin, y, pageWidth - margin, y);
            y += 7;
          }
        });
        
        y += 10;
      }
      
      // Add SEC filings if available
      if (report.recentDevelopments.filings && report.recentDevelopments.filings.length > 0) {
        // Check if we need a new page
        if (y > pageHeight - 60) {
          doc.addPage();
          y = margin;
          
          // Add small logo at the top of the new page
          addAiDiligenceLogoToPDF(doc, pageWidth - 50, 10, 20);
        }
        
        doc.setFontSize(14);
        doc.setFont('helvetica', 'bold');
        doc.text('SEC Filings', margin, y);
        y += 10;
        
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(10);
        
        // Create a simple table for filings
        const filingHeaders = ['Type', 'Date', 'Description'];
        const filingWidths = [(pageWidth - 2*margin) * 0.2, (pageWidth - 2*margin) * 0.2, (pageWidth - 2*margin) * 0.6];
        
        // Draw table header
        doc.setFont('helvetica', 'bold');
        doc.setFillColor(240, 240, 240);
        doc.rect(margin, y, pageWidth - 2*margin, 8, 'F');
        
        let xPos = margin;
        filingHeaders.forEach((header, index) => {
          doc.text(header, xPos + 2, y + 5);
          xPos += filingWidths[index];
        });
        
        y += 8;
        
        // Draw table rows
        report.recentDevelopments.filings.slice(0, 5).forEach((filing, index) => {
          const descriptionLines = doc.splitTextToSize(filing.description || 'No description available', filingWidths[2] - 4);
          const rowHeight = Math.max(8, descriptionLines.length * 5 + 3);
          
          // Check if we need a new page
          if (y + rowHeight > pageHeight - 20) {
            doc.addPage();
            y = margin;
            
            // Add small logo at the top of the new page
            addAiDiligenceLogoToPDF(doc, pageWidth - 50, 10, 20);
            
            // Redraw header
            doc.setFont('helvetica', 'bold');
            doc.setFillColor(240, 240, 240);
            doc.rect(margin, y, pageWidth - 2*margin, 8, 'F');
            
            xPos = margin;
            filingHeaders.forEach((header, index) => {
              doc.text(header, xPos + 2, y + 5);
              xPos += filingWidths[index];
            });
            
            y += 8;
          }
          
          // Draw row background (alternating colors)
          if (index % 2 === 0) {
            doc.setFillColor(250, 250, 250);
            doc.rect(margin, y, pageWidth - 2*margin, rowHeight, 'F');
          }
          
          // Draw row content
          doc.setFont('helvetica', 'normal');
          xPos = margin;
          
          // Type
          doc.text(filing.type || 'N/A', xPos + 2, y + 5);
          xPos += filingWidths[0];
          
          // Date
          const formattedDate = filing.date ? new Date(filing.date).toLocaleDateString() : 'N/A';
          doc.text(formattedDate, xPos + 2, y + 5);
          xPos += filingWidths[1];
          
          // Description
          doc.text(descriptionLines, xPos + 2, y + 5);
          
          // Add URL link if available
          if (filing.url) {
            doc.setTextColor(41, 98, 255); // Blue for link
            const linkText = 'View Filing';
            const linkWidth = doc.getTextWidth(linkText);
            doc.text(linkText, xPos + 2, y + rowHeight - 2);
            doc.link(xPos + 2, y + rowHeight - 6, linkWidth, 5, { url: filing.url });
            doc.setTextColor(0, 0, 0); // Reset text color
          }
          
          y += rowHeight;
        });
        
        y += 10;
      }
      
      // Add strategic initiatives if available
      if (report.recentDevelopments.strategic && report.recentDevelopments.strategic.length > 0) {
        addSection('Strategic Initiatives', report.recentDevelopments.strategic, 2);
      }
    }
    
    // Add footer to each page with website URL
    const pageCount = doc.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      
      // Add page number
      doc.setFontSize(8);
      doc.setTextColor(150, 150, 150);
      doc.text(`Page ${i} of ${pageCount}`, pageWidth - margin, pageHeight - 10);
      
      // Add website with hyperlink
      const linkText = 'https://aidiligence.pro';
      const linkWidth = doc.getTextWidth(linkText);
      doc.setTextColor(41, 98, 255); // Blue for link
      doc.text(linkText, margin, pageHeight - 10);
      doc.link(margin, pageHeight - 15, linkWidth, 10, { url: 'https://aidiligence.pro' });
      
      // Add watermark
      doc.setTextColor(245, 245, 245); // Very light gray
      doc.setFontSize(60);
      doc.text('aidiligence.pro', pageWidth/2, pageHeight/2, {
        align: 'center',
        angle: 45
      });
    }
    
    // Save the PDF with company name and date
    const formattedDate = new Date().toISOString().split('T')[0];
    const sanitizedCompanyName = company.toLowerCase().replace(/[^a-z0-9]/gi, '_');
    const fileName = `${sanitizedCompanyName}_due_diligence_${formattedDate}.pdf`;
    
    doc.save(fileName);
    toast.success('Report downloaded successfully');
  };

  if (!user) {
    return (
      <Card className={className}>
        <CardContent className="py-12 text-center">
          <Lock className="w-12 h-12 mx-auto mb-4 text-muted-foreground" />
          <h3 className="text-xl font-semibold mb-2">Login Required</h3>
          <p className="text-muted-foreground mb-6">Please login to access the due diligence report generator.</p>
          <Button onClick={() => navigate('/login')}>Login</Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="container mx-auto px-4 py-12">
      <div className="max-w-4xl mx-auto">
        <div className="flex items-center justify-between mb-8">
          <h1 className="text-4xl font-bold">Due Diligence Report</h1>
          <div ref={logoRef} className="hidden">
            <Logo size="lg" variant="colored" />
          </div>
        </div>
        
        <Card className="p-6 mb-6">
          <div className="space-y-4">
            <div className="flex gap-4">
              <div className="flex-1">
                <Label htmlFor="company">Company Name</Label>
                <div className="relative">
                  <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                  <Input
                    id="company"
                    value={company}
                    onChange={(e) => setCompany(e.target.value)}
                    className="pl-10"
                    placeholder="Enter company name (e.g., Apple, Microsoft)"
                  />
                </div>
              </div>
              <Button
                onClick={() => setShowOptions(!showOptions)}
                variant="outline"
                className="mt-auto"
              >
                <Settings2 className="w-4 h-4 mr-2" />
                Options
                {showOptions ? (
                  <ChevronUp className="w-4 h-4 ml-2" />
                ) : (
                  <ChevronDown className="w-4 h-4 ml-2" />
                )}
              </Button>
            </div>

            {showOptions && (
              <div className="space-y-4 pt-4 border-t">
                <div className="flex items-center justify-between">
                  <div>
                    <Label>Include Charts</Label>
                    <p className="text-sm text-muted-foreground">
                      Add visual representations of data
                    </p>
                  </div>
                  <Switch
                    checked={options.format.includeCharts}
                    onCheckedChange={(checked) => 
                      setOptions(prev => ({
                        ...prev,
                        format: { ...prev.format, includeCharts: checked }
                      }))
                    }
                  />
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <Label>Include Tables</Label>
                    <p className="text-sm text-muted-foreground">
                      Add detailed data tables
                    </p>
                  </div>
                  <Switch
                    checked={options.format.includeTables}
                    onCheckedChange={(checked) => 
                      setOptions(prev => ({
                        ...prev,
                        format: { ...prev.format, includeTables: checked }
                      }))
                    }
                  />
                </div>
              </div>
            )}

            <Button 
              onClick={generateReport} 
              className="w-full"
              disabled={loading}
            >
              {loading ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  Generating Report...
                </>
              ) : (
                <>
                  <FileText className="w-4 h-4 mr-2" />
                  Generate Report
                </>
              )}
            </Button>
          </div>
        </Card>

        {error && (
          <Alert variant="destructive" className="mb-6">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>Error</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        {report && (
          <Card className="p-6">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-2xl font-semibold">Report Results</h2>
              <div className="flex space-x-2">
                <Button 
                  variant="outline" 
                  onClick={() => {
                    setReport(null);
                    setError(null);
                  }}
                >
                  <RefreshCcw className="w-4 h-4 mr-2" />
                  New Report
                </Button>
                <Button onClick={downloadReport}>
                  <Download className="w-4 h-4 mr-2" />
                  Download PDF
                </Button>
              </div>
            </div>

            <div className="prose max-w-none dark:prose-invert">
              <div className="space-y-6">
                {/* Executive Summary */}
                <section>
                  <h3 className="text-xl font-semibold">Executive Summary</h3>
                  <p>{report.executiveSummary.overview}</p>
                  
                  <div className="flex flex-wrap gap-4 mt-4">
                    <div className={`px-4 py-2 rounded-full text-sm font-medium
                      ${report.executiveSummary.riskRating === 'Low' 
                        ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400' 
                        : report.executiveSummary.riskRating === 'Medium'
                          ? 'bg-amber-100 text-amber-800 dark:bg-amber-900/20 dark:text-amber-400'
                          : 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400'
                      }`}
                    >
                      Risk Rating: {report.executiveSummary.riskRating}
                    </div>
                    
                    <div className="px-4 py-2 rounded-full bg-primary/10 text-primary text-sm font-medium">
                      Recommendation: {
                        report.executiveSummary.recommendation.length > 30
                          ? report.executiveSummary.recommendation.substring(0, 30) + '...'
                          : report.executiveSummary.recommendation
                      }
                    </div>
                  </div>
                  
                  <div className="mt-4">
                    <h4 className="font-semibold">Key Findings</h4>
                    <ul>
                      {report.executiveSummary.keyFindings.map((finding, index) => (
                        <li key={index}>{finding}</li>
                      ))}
                    </ul>
                  </div>
                </section>

                {/* Financial Analysis */}
                <section>
                  <h3 className="text-xl font-semibold">Financial Analysis</h3>
                  <div className="grid grid-cols-2 sm:grid-cols-3 gap-4 mb-4">
                    {Object.entries(report.financialAnalysis.metrics).slice(0, 6).map(([key, value]) => (
                      <div key={key} className="p-4 bg-secondary/10 rounded-lg">
                        <p className="text-sm text-muted-foreground">{key}</p>
                        <p className="text-lg font-semibold">{value}</p>
                      </div>
                    ))}
                  </div>
                  
                  <div className="grid md:grid-cols-2 gap-6">
                    <div>
                      <h4 className="font-semibold">Financial Trends</h4>
                      <ul className="mt-2">
                        {report.financialAnalysis.trends.map((trend, index) => (
                          <li key={index} className="mb-1">{trend}</li>
                        ))}
                      </ul>
                    </div>
                    
                    <div>
                      <h4 className="font-semibold">Strengths & Weaknesses</h4>
                      <div className="mt-2 space-y-4">
                        <div>
                          <h5 className="text-sm font-medium text-green-600 dark:text-green-400">Strengths</h5>
                          <ul className="mt-1">
                            {report.financialAnalysis.strengths.map((item, index) => (
                              <li key={index} className="text-sm">{item}</li>
                            ))}
                          </ul>
                        </div>
                        
                        <div>
                          <h5 className="text-sm font-medium text-red-600 dark:text-red-400">Weaknesses</h5>
                          <ul className="mt-1">
                            {report.financialAnalysis.weaknesses.map((item, index) => (
                              <li key={index} className="text-sm">{item}</li>
                            ))}
                          </ul>
                        </div>
                      </div>
                    </div>
                  </div>
                </section>

                {/* Market Analysis */}
                <section>
                  <h3 className="text-xl font-semibold">Market Analysis</h3>
                  <p>{report.marketAnalysis.position}</p>
                  
                  {report.marketAnalysis.competitors.length > 0 && (
                    <div className="mt-4">
                      <h4 className="font-semibold">Key Competitors</h4>
                      <div className="flex flex-wrap gap-2 mt-2">
                        {report.marketAnalysis.competitors.map((competitor, index) => (
                          <span key={index} className="px-3 py-1 bg-secondary/20 rounded-full text-sm">
                            {competitor}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  <div className="mt-6 grid md:grid-cols-2 gap-4">
                    <div>
                      <h4 className="font-semibold text-green-600 dark:text-green-400">Strengths</h4>
                      <ul className="mt-2">
                        {report.marketAnalysis.swot.strengths.map((strength, index) => (
                          <li key={index}>{strength}</li>
                        ))}
                      </ul>
                    </div>
                    <div>
                      <h4 className="font-semibold text-red-600 dark:text-red-400">Weaknesses</h4>
                      <ul className="mt-2">
                        {report.marketAnalysis.swot.weaknesses.map((weakness, index) => (
                          <li key={index}>{weakness}</li>
                        ))}
                      </ul>
                    </div>
                    <div>
                      <h4 className="font-semibold text-blue-600 dark:text-blue-400">Opportunities</h4>
                      <ul className="mt-2">
                        {report.marketAnalysis.swot.opportunities.map((opportunity, index) => (
                          <li key={index}>{opportunity}</li>
                        ))}
                      </ul>
                    </div>
                    <div>
                      <h4 className="font-semibold text-amber-600 dark:text-amber-400">Threats</h4>
                      <ul className="mt-2">
                        {report.marketAnalysis.swot.threats.map((threat, index) => (
                          <li key={index}>{threat}</li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </section>

                {/* Risk Assessment */}
                <section>
                  <h3 className="text-xl font-semibold">Risk Assessment</h3>
                  <div className="grid md:grid-cols-2 gap-6 mt-4">
                    <div>
                      <h4 className="font-semibold">Financial Risks</h4>
                      <ul className="mt-2">
                        {report.riskAssessment.financial.map((risk, index) => (
                          <li key={index}>{risk}</li>
                        ))}
                      </ul>
                    </div>
                    <div>
                      <h4 className="font-semibold">Market Risks</h4>
                      <ul className="mt-2">
                        {report.riskAssessment.market.map((risk, index) => (
                          <li key={index}>{risk}</li>
                        ))}
                      </ul>
                    </div>
                    <div>
                      <h4 className="font-semibold">Operational Risks</h4>
                      <ul className="mt-2">
                        {report.riskAssessment.operational.map((risk, index) => (
                          <li key={index}>{risk}</li>
                        ))}
                      </ul>
                    </div>
                    {report.riskAssessment.regulatory.length > 0 && (
                      <div>
                        <h4 className="font-semibold">Regulatory Risks</h4>
                        <ul className="mt-2">
                          {report.riskAssessment.regulatory.map((risk, index) => (
                            <li key={index}>{risk}</li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                </section>
                
                {/* Recent Developments Section */}
                {report.recentDevelopments && (
                  <section>
                    <h3 className="text-xl font-semibold">Recent Developments</h3>
                    
                    {/* News Articles */}
                    {report.recentDevelopments.news && report.recentDevelopments.news.length > 0 && (
                      <div className="mt-4">
                        <h4 className="font-semibold">Recent News</h4>
                        <div className="space-y-4 mt-2">
                          {report.recentDevelopments.news.slice(0, 5).map((news, index) => (
                            <div key={index} className="p-4 bg-secondary/5 rounded-lg hover:bg-secondary/10 transition-colors">
                              <h5 className="font-medium">{news.title}</h5>
                              <div className="flex items-center text-sm text-muted-foreground mt-1">
                                <span>{news.source?.name || 'Unknown Source'}</span>
                                <span className="mx-2">â€¢</span>
                                <span>{new Date(news.date).toLocaleDateString()}</span>
                              </div>
                              {news.url && (
                                <a 
                                  href={news.url} 
                                  target="_blank" 
                                  rel="noopener noreferrer"
                                  className="text-primary text-sm mt-2 inline-block hover:underline"
                                >
                                  Read Article â†’
                                </a>
                              )}
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                    
                    {/* SEC Filings */}
                    {report.recentDevelopments.filings && report.recentDevelopments.filings.length > 0 && (
                      <div className="mt-6">
                        <h4 className="font-semibold">SEC Filings</h4>
                        <div className="overflow-x-auto mt-2">
                          <table className="w-full border-collapse">
                            <thead>
                              <tr className="bg-secondary/10">
                                <th className="text-left p-2 text-sm">Type</th>
                                <th className="text-left p-2 text-sm">Date</th>
                                <th className="text-left p-2 text-sm">Description</th>
                                <th className="text-left p-2 text-sm">Link</th>
                              </tr>
                            </thead>
                            <tbody>
                              {report.recentDevelopments.filings.slice(0, 5).map((filing, index) => (
                                <tr key={index} className={index % 2 === 0 ? 'bg-secondary/5' : ''}>
                                  <td className="p-2 text-sm">{filing.type}</td>
                                  <td className="p-2 text-sm">{new Date(filing.date).toLocaleDateString()}</td>
                                  <td className="p-2 text-sm">{filing.description}</td>
                                  <td className="p-2 text-sm">
                                    {filing.url && (
                                      <a 
                                        href={filing.url} 
                                        target="_blank" 
                                        rel="noopener noreferrer"
                                        className="text-primary hover:underline"
                                      >
                                        View
                                      </a>
                                    )}
                                  </td>
                                </tr>
                              ))}
                            </tbody>
                          </table>
                        </div>
                      </div>
                    )}
                    
                    {/* Strategic Initiatives */}
                    {report.recentDevelopments.strategic && report.recentDevelopments.strategic.length > 0 && (
                      <div className="mt-6">
                        <h4 className="font-semibold">Strategic Initiatives</h4>
                        <ul className="mt-2">
                          {report.recentDevelopments.strategic.map((initiative, index) => (
                            <li key={index}>{initiative}</li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </section>
                )}
                
                {/* Disclaimer */}
                <div className="mt-8 p-4 border rounded-lg bg-muted/30">
                  <p className="text-sm text-muted-foreground">
                    <strong>Disclaimer:</strong> This report is generated using AI and should be used for informational 
                    purposes only. It does not constitute investment advice. Always perform your own due diligence 
                    before making investment decisions.
                  </p>
                </div>
              </div>
            </div>
          </Card>
        )}
      </div>
    </div>
  );
} 