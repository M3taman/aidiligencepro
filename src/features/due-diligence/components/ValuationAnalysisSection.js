import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import ReportSection from './ReportSection';
/**
 * Valuation Analysis section of the due diligence report
 */
export const ValuationAnalysisSection = ({ data }) => {
    if (!data)
        return null;
    return (_jsx(ReportSection, { title: "Valuation Analysis", children: _jsxs("div", { className: "space-y-6", children: [data.summary && (_jsxs("div", { children: [_jsx("h4", { className: "font-semibold", children: "Valuation Summary" }), _jsx("p", { className: "mt-2", children: data.summary })] })), data.metrics && Object.keys(data.metrics).length > 0 && (_jsxs("div", { children: [_jsx("h4", { className: "font-semibold", children: "Key Valuation Metrics" }), _jsx("div", { className: "mt-3 overflow-x-auto", children: _jsxs("table", { className: "min-w-full divide-y divide-gray-200", children: [_jsx("thead", { className: "bg-gray-50", children: _jsxs("tr", { children: [_jsx("th", { scope: "col", className: "px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider", children: "Metric" }), _jsx("th", { scope: "col", className: "px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider", children: "Value" }), _jsx("th", { scope: "col", className: "px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider", children: "Industry Average" })] }) }), _jsx("tbody", { className: "bg-white divide-y divide-gray-200", children: Object.entries(data.metrics).map(([key, value]) => (_jsxs("tr", { children: [_jsx("td", { className: "px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900", children: key }), _jsx("td", { className: "px-4 py-3 whitespace-nowrap text-sm text-gray-600", children: value.value || '-' }), _jsx("td", { className: "px-4 py-3 whitespace-nowrap text-sm text-gray-600", children: value.industryAverage || '-' })] }, key))) })] }) })] })), data.methods && data.methods.length > 0 && (_jsxs("div", { children: [_jsx("h4", { className: "font-semibold", children: "Valuation Methods Used" }), _jsx("ul", { className: "mt-2 list-disc pl-5", children: data.methods.map((method, index) => (_jsx("li", { className: "text-sm", children: method }, index))) })] })), data.dcfAnalysis && (_jsxs("div", { children: [_jsx("h4", { className: "font-semibold", children: "DCF Analysis" }), _jsx("p", { className: "mt-2", children: data.dcfAnalysis.summary }), data.dcfAnalysis.assumptions && data.dcfAnalysis.assumptions.length > 0 && (_jsxs("div", { className: "mt-3", children: [_jsx("h5", { className: "text-sm font-medium", children: "Key Assumptions:" }), _jsx("ul", { className: "mt-1 list-disc pl-5", children: data.dcfAnalysis.assumptions.map((assumption, index) => (_jsx("li", { className: "text-sm", children: assumption }, index))) })] }))] })), data.comparableCompanies && data.comparableCompanies.length > 0 && (_jsxs("div", { children: [_jsx("h4", { className: "font-semibold", children: "Comparable Companies" }), _jsx("div", { className: "mt-3 grid gap-3 md:grid-cols-2", children: data.comparableCompanies.map((company, index) => (_jsxs("div", { className: "bg-gray-50 p-3 rounded-md", children: [_jsx("p", { className: "font-medium", children: company.name }), company.metrics && (_jsx("div", { className: "mt-2 text-sm", children: Object.entries(company.metrics).map(([key, value]) => (_jsxs("div", { className: "grid grid-cols-2 gap-2", children: [_jsxs("span", { className: "text-gray-600", children: [key, ":"] }), _jsx("span", { children: value })] }, key))) }))] }, index))) })] })), data.conclusion && (_jsxs("div", { children: [_jsx("h4", { className: "font-semibold", children: "Valuation Conclusion" }), _jsx("p", { className: "mt-2", children: data.conclusion })] }))] }) }));
};
export default ValuationAnalysisSection;
